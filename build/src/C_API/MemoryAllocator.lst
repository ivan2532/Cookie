GAS LISTING /tmp/cc1mRzn1.s 			page 1


   1              		.file	"MemoryAllocator.c"
   2              		.option nopic
   3              		.option norelax
   4              		.text
   5              	.Ltext0:
   6              		.cfi_sections	.debug_frame
   7              		.align	2
   8              		.globl	initFirstBlock
  10              	initFirstBlock:
  11              	.LFB0:
  12              		.file 1 "src/C_API/MemoryAllocator.c"
   1:src/C_API/MemoryAllocator.c **** #include "../../lib/hw.h"
   2:src/C_API/MemoryAllocator.c **** 
   3:src/C_API/MemoryAllocator.c **** typedef struct Block
   4:src/C_API/MemoryAllocator.c **** {
   5:src/C_API/MemoryAllocator.c ****     size_t size;
   6:src/C_API/MemoryAllocator.c ****     struct Block* prev;
   7:src/C_API/MemoryAllocator.c ****     struct Block* next;
   8:src/C_API/MemoryAllocator.c **** } Block;
   9:src/C_API/MemoryAllocator.c **** 
  10:src/C_API/MemoryAllocator.c **** static Block* freeBlocksList = 0;
  11:src/C_API/MemoryAllocator.c **** 
  12:src/C_API/MemoryAllocator.c **** //Make the first free block (which will be the whole heap) on first allocation.
  13:src/C_API/MemoryAllocator.c **** void initFirstBlock()
  14:src/C_API/MemoryAllocator.c **** {
  13              		.loc 1 14 1
  14              		.cfi_startproc
  15 0000 130101FF 		addi	sp,sp,-16
  16              		.cfi_def_cfa_offset 16
  17 0004 23348100 		sd	s0,8(sp)
  18              		.cfi_offset 8, -8
  19 0008 13040101 		addi	s0,sp,16
  20              		.cfi_def_cfa 8, 0
  15:src/C_API/MemoryAllocator.c ****     Block* firstBlock = (Block*)HEAP_START_ADDR;
  21              		.loc 1 15 5
  22              		.loc 1 15 12 is_stmt 0
  23 000c 17070000 		ld	a4,HEAP_START_ADDR
  23      03370700 
  24              	.LVL0:
  16:src/C_API/MemoryAllocator.c ****     firstBlock->size = (HEAP_END_ADDR - 1) - HEAP_START_ADDR;
  25              		.loc 1 16 5 is_stmt 1
  26              		.loc 1 16 39 is_stmt 0
  27 0014 97070000 		ld	a5,HEAP_END_ADDR
  27      83B70700 
  28 001c 9387F7FF 		addi	a5,a5,-1
  29              		.loc 1 16 44
  30 0020 B387E740 		sub	a5,a5,a4
  31              		.loc 1 16 22
  32 0024 2330F700 		sd	a5,0(a4)
  17:src/C_API/MemoryAllocator.c ****     firstBlock->next = 0;
  33              		.loc 1 17 5 is_stmt 1
  34              		.loc 1 17 22 is_stmt 0
  35 0028 23380700 		sd	zero,16(a4)
  18:src/C_API/MemoryAllocator.c ****     freeBlocksList = firstBlock;
  36              		.loc 1 18 5 is_stmt 1
  37              		.loc 1 18 20 is_stmt 0
  38 002c 97070000 		sd	a4,freeBlocksList,a5
GAS LISTING /tmp/cc1mRzn1.s 			page 2


  38      23B0E700 
  19:src/C_API/MemoryAllocator.c **** }
  39              		.loc 1 19 1
  40 0034 03348100 		ld	s0,8(sp)
  41              		.cfi_restore 8
  42              		.cfi_def_cfa 2, 16
  43 0038 13010101 		addi	sp,sp,16
  44              		.cfi_def_cfa_offset 0
  45 003c 67800000 		jr	ra
  46              		.cfi_endproc
  47              	.LFE0:
  49              		.align	2
  50              		.globl	splitFreeBlock
  52              	splitFreeBlock:
  53              	.LFB2:
  20:src/C_API/MemoryAllocator.c **** 
  21:src/C_API/MemoryAllocator.c **** //Align given size to MEM_BLOCK_SIZE
  22:src/C_API/MemoryAllocator.c **** inline static size_t align(size_t size)
  23:src/C_API/MemoryAllocator.c **** {
  24:src/C_API/MemoryAllocator.c ****     return ( (size - 1) / MEM_BLOCK_SIZE + 1) * MEM_BLOCK_SIZE;
  25:src/C_API/MemoryAllocator.c **** }
  26:src/C_API/MemoryAllocator.c **** 
  27:src/C_API/MemoryAllocator.c **** //Get a block of needed size from a free block and leave the rest free. Needed size includes the de
  28:src/C_API/MemoryAllocator.c **** Block* splitFreeBlock(Block* block, size_t neededSize)
  29:src/C_API/MemoryAllocator.c **** {
  54              		.loc 1 29 1 is_stmt 1
  55              		.cfi_startproc
  56              	.LVL1:
  57 0040 130101FF 		addi	sp,sp,-16
  58              		.cfi_def_cfa_offset 16
  59 0044 23348100 		sd	s0,8(sp)
  60              		.cfi_offset 8, -8
  61 0048 13040101 		addi	s0,sp,16
  62              		.cfi_def_cfa 8, 0
  30:src/C_API/MemoryAllocator.c ****     if(neededSize % MEM_BLOCK_SIZE != 0 || neededSize > block->size)
  63              		.loc 1 30 5
  64              		.loc 1 30 19 is_stmt 0
  65 004c 93F7F503 		andi	a5,a1,63
  66              		.loc 1 30 7
  67 0050 63900704 		bnez	a5,.L5
  68              		.loc 1 30 62 discriminator 1
  69 0054 83370500 		ld	a5,0(a0)
  70              		.loc 1 30 41 discriminator 1
  71 0058 63E0B704 		bltu	a5,a1,.L6
  31:src/C_API/MemoryAllocator.c ****     {
  32:src/C_API/MemoryAllocator.c ****         return 0;
  33:src/C_API/MemoryAllocator.c ****     }
  34:src/C_API/MemoryAllocator.c **** 
  35:src/C_API/MemoryAllocator.c ****     if(block->size - neededSize < MEM_BLOCK_SIZE)
  72              		.loc 1 35 5 is_stmt 1
  73              		.loc 1 35 20 is_stmt 0
  74 005c B387B740 		sub	a5,a5,a1
  75              		.loc 1 35 7
  76 0060 1307F003 		li	a4,63
  77 0064 6370F702 		bleu	a5,a4,.L3
  36:src/C_API/MemoryAllocator.c ****     {
  37:src/C_API/MemoryAllocator.c ****         return block;
GAS LISTING /tmp/cc1mRzn1.s 			page 3


  38:src/C_API/MemoryAllocator.c ****     }
  39:src/C_API/MemoryAllocator.c **** 
  40:src/C_API/MemoryAllocator.c ****     void* leftoverBlockAddress = (void*)block + neededSize;
  78              		.loc 1 40 5 is_stmt 1
  79              		.loc 1 40 11 is_stmt 0
  80 0068 3307B500 		add	a4,a0,a1
  81              	.LVL2:
  41:src/C_API/MemoryAllocator.c ****     Block* leftoverBlock = (Block*)leftoverBlockAddress;
  82              		.loc 1 41 5 is_stmt 1
  42:src/C_API/MemoryAllocator.c ****     leftoverBlock->size = block->size - neededSize;
  83              		.loc 1 42 5
  84              		.loc 1 42 25 is_stmt 0
  85 006c 2330F700 		sd	a5,0(a4)
  43:src/C_API/MemoryAllocator.c ****     leftoverBlock->prev = block;
  86              		.loc 1 43 5 is_stmt 1
  87              		.loc 1 43 25 is_stmt 0
  88 0070 2334A700 		sd	a0,8(a4)
  44:src/C_API/MemoryAllocator.c ****     leftoverBlock->next = block->next;
  89              		.loc 1 44 5 is_stmt 1
  90              		.loc 1 44 32 is_stmt 0
  91 0074 83370501 		ld	a5,16(a0)
  92              		.loc 1 44 25
  93 0078 2338F700 		sd	a5,16(a4)
  45:src/C_API/MemoryAllocator.c **** 
  46:src/C_API/MemoryAllocator.c ****     block->size = neededSize;
  94              		.loc 1 46 5 is_stmt 1
  95              		.loc 1 46 17 is_stmt 0
  96 007c 2330B500 		sd	a1,0(a0)
  47:src/C_API/MemoryAllocator.c ****     block->next = leftoverBlock;
  97              		.loc 1 47 5 is_stmt 1
  98              		.loc 1 47 17 is_stmt 0
  99 0080 2338E500 		sd	a4,16(a0)
  48:src/C_API/MemoryAllocator.c **** 
  49:src/C_API/MemoryAllocator.c ****     return block;
 100              		.loc 1 49 5 is_stmt 1
 101              	.LVL3:
 102              	.L3:
  50:src/C_API/MemoryAllocator.c **** }
 103              		.loc 1 50 1 is_stmt 0
 104 0084 03348100 		ld	s0,8(sp)
 105              		.cfi_remember_state
 106              		.cfi_restore 8
 107              		.cfi_def_cfa 2, 16
 108 0088 13010101 		addi	sp,sp,16
 109              		.cfi_def_cfa_offset 0
 110 008c 67800000 		jr	ra
 111              	.LVL4:
 112              	.L5:
 113              		.cfi_restore_state
  32:src/C_API/MemoryAllocator.c ****     }
 114              		.loc 1 32 16
 115 0090 13050000 		li	a0,0
 116              	.LVL5:
 117 0094 6FF01FFF 		j	.L3
 118              	.LVL6:
 119              	.L6:
 120 0098 13050000 		li	a0,0
GAS LISTING /tmp/cc1mRzn1.s 			page 4


 121              	.LVL7:
 122 009c 6FF09FFE 		j	.L3
 123              		.cfi_endproc
 124              	.LFE2:
 126              		.align	2
 127              		.globl	firstFit
 129              	firstFit:
 130              	.LFB3:
  51:src/C_API/MemoryAllocator.c **** 
  52:src/C_API/MemoryAllocator.c **** //Find the first block in the list of free blocks that is big enough to fit minSize.
  53:src/C_API/MemoryAllocator.c **** Block* firstFit(size_t minSize)
  54:src/C_API/MemoryAllocator.c **** {
 131              		.loc 1 54 1 is_stmt 1
 132              		.cfi_startproc
 133              	.LVL8:
 134 00a0 130101FE 		addi	sp,sp,-32
 135              		.cfi_def_cfa_offset 32
 136 00a4 233C1100 		sd	ra,24(sp)
 137 00a8 23388100 		sd	s0,16(sp)
 138 00ac 23349100 		sd	s1,8(sp)
 139              		.cfi_offset 1, -8
 140              		.cfi_offset 8, -16
 141              		.cfi_offset 9, -24
 142 00b0 13040102 		addi	s0,sp,32
 143              		.cfi_def_cfa 8, 0
 144 00b4 93040500 		mv	s1,a0
  55:src/C_API/MemoryAllocator.c ****     if(freeBlocksList == 0)
 145              		.loc 1 55 5
 146              		.loc 1 55 23 is_stmt 0
 147 00b8 97070000 		ld	a5,freeBlocksList
 147      83B70700 
 148              		.loc 1 55 7
 149 00c0 63860702 		beqz	a5,.L15
 150              	.LVL9:
 151              	.L10:
  56:src/C_API/MemoryAllocator.c ****     {
  57:src/C_API/MemoryAllocator.c ****         initFirstBlock();
  58:src/C_API/MemoryAllocator.c ****     }
  59:src/C_API/MemoryAllocator.c **** 
  60:src/C_API/MemoryAllocator.c ****     Block* iterator = freeBlocksList;
 152              		.loc 1 60 5 is_stmt 1
 153              		.loc 1 60 12 is_stmt 0
 154 00c4 17050000 		ld	a0,freeBlocksList
 154      03350500 
 155              	.LVL10:
  61:src/C_API/MemoryAllocator.c **** 
  62:src/C_API/MemoryAllocator.c ****     while (iterator != 0)
 156              		.loc 1 62 5 is_stmt 1
 157              	.L11:
 158              		.loc 1 62 11
 159 00cc 63060500 		beqz	a0,.L9
  63:src/C_API/MemoryAllocator.c ****     {
  64:src/C_API/MemoryAllocator.c ****         if (iterator->size < minSize)
 160              		.loc 1 64 9
 161              		.loc 1 64 21 is_stmt 0
 162 00d0 83370500 		ld	a5,0(a0)
 163              		.loc 1 64 12
GAS LISTING /tmp/cc1mRzn1.s 			page 5


 164 00d4 63E29702 		bltu	a5,s1,.L16
 165              	.L9:
  65:src/C_API/MemoryAllocator.c ****         {
  66:src/C_API/MemoryAllocator.c ****             iterator = iterator->next;
  67:src/C_API/MemoryAllocator.c ****             continue;
  68:src/C_API/MemoryAllocator.c ****         }
  69:src/C_API/MemoryAllocator.c **** 
  70:src/C_API/MemoryAllocator.c ****         return iterator;
  71:src/C_API/MemoryAllocator.c ****     }
  72:src/C_API/MemoryAllocator.c **** 
  73:src/C_API/MemoryAllocator.c **** 
  74:src/C_API/MemoryAllocator.c **** 
  75:src/C_API/MemoryAllocator.c ****     return 0;
  76:src/C_API/MemoryAllocator.c **** }
 166              		.loc 1 76 1
 167 00d8 83308101 		ld	ra,24(sp)
 168              		.cfi_remember_state
 169              		.cfi_restore 1
 170 00dc 03340101 		ld	s0,16(sp)
 171              		.cfi_restore 8
 172              		.cfi_def_cfa 2, 32
 173 00e0 83348100 		ld	s1,8(sp)
 174              		.cfi_restore 9
 175              	.LVL11:
 176 00e4 13010102 		addi	sp,sp,32
 177              		.cfi_def_cfa_offset 0
 178 00e8 67800000 		jr	ra
 179              	.LVL12:
 180              	.L15:
 181              		.cfi_restore_state
  57:src/C_API/MemoryAllocator.c ****     }
 182              		.loc 1 57 9 is_stmt 1
 183 00ec 97000000 		call	initFirstBlock
 183      E7800000 
 184              	.LVL13:
 185 00f4 6FF01FFD 		j	.L10
 186              	.LVL14:
 187              	.L16:
  66:src/C_API/MemoryAllocator.c ****             continue;
 188              		.loc 1 66 13
  66:src/C_API/MemoryAllocator.c ****             continue;
 189              		.loc 1 66 22 is_stmt 0
 190 00f8 03350501 		ld	a0,16(a0)
 191              	.LVL15:
  67:src/C_API/MemoryAllocator.c ****         }
 192              		.loc 1 67 13 is_stmt 1
 193 00fc 6FF01FFD 		j	.L11
 194              		.cfi_endproc
 195              	.LFE3:
 197              		.align	2
 198              		.globl	__mem_alloc
 200              	__mem_alloc:
 201              	.LFB4:
  77:src/C_API/MemoryAllocator.c **** 
  78:src/C_API/MemoryAllocator.c **** //Allocate a memory block of "size" bytes on the heap.
  79:src/C_API/MemoryAllocator.c **** void* __mem_alloc(size_t size)
  80:src/C_API/MemoryAllocator.c **** {
GAS LISTING /tmp/cc1mRzn1.s 			page 6


 202              		.loc 1 80 1
 203              		.cfi_startproc
 204              	.LVL16:
  81:src/C_API/MemoryAllocator.c ****     if(size == 0)
 205              		.loc 1 81 5
 206              		.loc 1 81 7 is_stmt 0
 207 0100 630A0508 		beqz	a0,.L22
  80:src/C_API/MemoryAllocator.c ****     if(size == 0)
 208              		.loc 1 80 1
 209 0104 130101FE 		addi	sp,sp,-32
 210              		.cfi_def_cfa_offset 32
 211 0108 233C1100 		sd	ra,24(sp)
 212 010c 23388100 		sd	s0,16(sp)
 213 0110 23349100 		sd	s1,8(sp)
 214              		.cfi_offset 1, -8
 215              		.cfi_offset 8, -16
 216              		.cfi_offset 9, -24
 217 0114 13040102 		addi	s0,sp,32
 218              		.cfi_def_cfa 8, 0
  82:src/C_API/MemoryAllocator.c ****     {
  83:src/C_API/MemoryAllocator.c ****         //Can't allocate a block with size 0
  84:src/C_API/MemoryAllocator.c ****         return 0;
  85:src/C_API/MemoryAllocator.c ****     }
  86:src/C_API/MemoryAllocator.c **** 
  87:src/C_API/MemoryAllocator.c ****     //Include the size of the descriptor and align it to MEM_BLOCK_SIZE
  88:src/C_API/MemoryAllocator.c ****     size += sizeof(Block);
 219              		.loc 1 88 5 is_stmt 1
 220              	.LVL17:
  89:src/C_API/MemoryAllocator.c ****     size = align(size);
 221              		.loc 1 89 5
 222              	.LBB4:
 223              	.LBB5:
  24:src/C_API/MemoryAllocator.c **** }
 224              		.loc 1 24 5
  24:src/C_API/MemoryAllocator.c **** }
 225              		.loc 1 24 20 is_stmt 0
 226 0118 93047501 		addi	s1,a0,23
  24:src/C_API/MemoryAllocator.c **** }
 227              		.loc 1 24 25
 228 011c 93D46400 		srli	s1,s1,6
  24:src/C_API/MemoryAllocator.c **** }
 229              		.loc 1 24 42
 230 0120 93841400 		addi	s1,s1,1
  24:src/C_API/MemoryAllocator.c **** }
 231              		.loc 1 24 47
 232 0124 93946400 		slli	s1,s1,6
 233              	.LVL18:
 234              	.LBE5:
 235              	.LBE4:
  90:src/C_API/MemoryAllocator.c **** 
  91:src/C_API/MemoryAllocator.c ****     if(freeBlocksList == 0)
 236              		.loc 1 91 5 is_stmt 1
 237              		.loc 1 91 23 is_stmt 0
 238 0128 97070000 		ld	a5,freeBlocksList
 238      83B70700 
 239              		.loc 1 91 7
 240 0130 638C0704 		beqz	a5,.L27
GAS LISTING /tmp/cc1mRzn1.s 			page 7


 241              	.L19:
  92:src/C_API/MemoryAllocator.c ****     {
  93:src/C_API/MemoryAllocator.c ****         initFirstBlock();
  94:src/C_API/MemoryAllocator.c ****     }
  95:src/C_API/MemoryAllocator.c **** 
  96:src/C_API/MemoryAllocator.c ****     //Find a suitable free block
  97:src/C_API/MemoryAllocator.c ****     Block* blockToAllocate = firstFit(size);
 242              		.loc 1 97 5 is_stmt 1
 243              		.loc 1 97 30 is_stmt 0
 244 0134 13850400 		mv	a0,s1
 245 0138 97000000 		call	firstFit
 245      E7800000 
 246              	.LVL19:
  98:src/C_API/MemoryAllocator.c ****     if(blockToAllocate == 0)
 247              		.loc 1 98 5 is_stmt 1
 248              		.loc 1 98 7 is_stmt 0
 249 0140 630A0502 		beqz	a0,.L17
  99:src/C_API/MemoryAllocator.c ****     {
 100:src/C_API/MemoryAllocator.c ****         return 0;
 101:src/C_API/MemoryAllocator.c ****     }
 102:src/C_API/MemoryAllocator.c **** 
 103:src/C_API/MemoryAllocator.c ****     //Leave the rest of the block that we don't need free
 104:src/C_API/MemoryAllocator.c ****     blockToAllocate = splitFreeBlock(blockToAllocate, size);
 250              		.loc 1 104 5 is_stmt 1
 251              		.loc 1 104 23 is_stmt 0
 252 0144 93850400 		mv	a1,s1
 253 0148 97000000 		call	splitFreeBlock
 253      E7800000 
 254              	.LVL20:
 105:src/C_API/MemoryAllocator.c **** 
 106:src/C_API/MemoryAllocator.c ****     //Remove the allocated block from the list
 107:src/C_API/MemoryAllocator.c ****     if(blockToAllocate->prev != 0)
 255              		.loc 1 107 5 is_stmt 1
 256              		.loc 1 107 23 is_stmt 0
 257 0150 83378500 		ld	a5,8(a0)
 258              		.loc 1 107 7
 259 0154 63860700 		beqz	a5,.L20
 108:src/C_API/MemoryAllocator.c ****     {
 109:src/C_API/MemoryAllocator.c ****         blockToAllocate->prev->next = blockToAllocate->next;
 260              		.loc 1 109 9 is_stmt 1
 261              		.loc 1 109 54 is_stmt 0
 262 0158 03370501 		ld	a4,16(a0)
 263              		.loc 1 109 37
 264 015c 23B8E700 		sd	a4,16(a5)
 265              	.L20:
 110:src/C_API/MemoryAllocator.c ****     }
 111:src/C_API/MemoryAllocator.c ****     if(blockToAllocate->next != 0)
 266              		.loc 1 111 5 is_stmt 1
 267              		.loc 1 111 23 is_stmt 0
 268 0160 83370501 		ld	a5,16(a0)
 269              		.loc 1 111 7
 270 0164 63860700 		beqz	a5,.L21
 112:src/C_API/MemoryAllocator.c ****     {
 113:src/C_API/MemoryAllocator.c ****         blockToAllocate->next->prev = blockToAllocate->prev;
 271              		.loc 1 113 9 is_stmt 1
 272              		.loc 1 113 54 is_stmt 0
 273 0168 03378500 		ld	a4,8(a0)
GAS LISTING /tmp/cc1mRzn1.s 			page 8


 274              		.loc 1 113 37
 275 016c 23B4E700 		sd	a4,8(a5)
 276              	.L21:
 114:src/C_API/MemoryAllocator.c ****     }
 115:src/C_API/MemoryAllocator.c **** 
 116:src/C_API/MemoryAllocator.c ****     //Return the actual memory pointer after the descriptor
 117:src/C_API/MemoryAllocator.c ****     return (void*)(blockToAllocate + sizeof(MEM_BLOCK_SIZE));
 277              		.loc 1 117 5 is_stmt 1
 278              		.loc 1 117 12 is_stmt 0
 279 0170 1305050C 		addi	a0,a0,192
 280              	.LVL21:
 281              	.L17:
 118:src/C_API/MemoryAllocator.c **** }
 282              		.loc 1 118 1
 283 0174 83308101 		ld	ra,24(sp)
 284              		.cfi_remember_state
 285              		.cfi_restore 1
 286 0178 03340101 		ld	s0,16(sp)
 287              		.cfi_restore 8
 288              		.cfi_def_cfa 2, 32
 289 017c 83348100 		ld	s1,8(sp)
 290              		.cfi_restore 9
 291              	.LVL22:
 292 0180 13010102 		addi	sp,sp,32
 293              		.cfi_def_cfa_offset 0
 294 0184 67800000 		jr	ra
 295              	.LVL23:
 296              	.L27:
 297              		.cfi_restore_state
  93:src/C_API/MemoryAllocator.c ****     }
 298              		.loc 1 93 9 is_stmt 1
 299 0188 97000000 		call	initFirstBlock
 299      E7800000 
 300              	.LVL24:
 301 0190 6FF05FFA 		j	.L19
 302              	.LVL25:
 303              	.L22:
 304              		.cfi_def_cfa_register 2
 305              		.cfi_restore 1
 306              		.cfi_restore 8
 307              		.cfi_restore 9
  84:src/C_API/MemoryAllocator.c ****     }
 308              		.loc 1 84 16 is_stmt 0
 309 0194 13050000 		li	a0,0
 310              	.LVL26:
 311              		.loc 1 118 1
 312 0198 67800000 		ret
 313              		.cfi_endproc
 314              	.LFE4:
 316              		.align	2
 317              		.globl	__mem_free
 319              	__mem_free:
 320              	.LFB5:
 119:src/C_API/MemoryAllocator.c **** 
 120:src/C_API/MemoryAllocator.c **** //Free memory allocated with __mem_alloc
 121:src/C_API/MemoryAllocator.c **** int __mem_free(void* ptr)
 122:src/C_API/MemoryAllocator.c **** {
GAS LISTING /tmp/cc1mRzn1.s 			page 9


 321              		.loc 1 122 1 is_stmt 1
 322              		.cfi_startproc
 323              	.LVL27:
 324 019c 130101FF 		addi	sp,sp,-16
 325              		.cfi_def_cfa_offset 16
 326 01a0 23348100 		sd	s0,8(sp)
 327              		.cfi_offset 8, -8
 328 01a4 13040101 		addi	s0,sp,16
 329              		.cfi_def_cfa 8, 0
 123:src/C_API/MemoryAllocator.c ****     //Get the descriptor of the allocated block
 124:src/C_API/MemoryAllocator.c ****     Block* descriptor = (Block*)(ptr - sizeof(Block));
 330              		.loc 1 124 5
 331              		.loc 1 124 12 is_stmt 0
 332 01a8 130785FE 		addi	a4,a0,-24
 333              	.LVL28:
 125:src/C_API/MemoryAllocator.c **** 
 126:src/C_API/MemoryAllocator.c ****     //We can just add the descriptor as the first element of the list
 127:src/C_API/MemoryAllocator.c ****     //because the order is not important, it's faster this way
 128:src/C_API/MemoryAllocator.c ****     descriptor->next = freeBlocksList;
 334              		.loc 1 128 5 is_stmt 1
 335              		.loc 1 128 22 is_stmt 0
 336 01ac 97070000 		lla	a5,freeBlocksList
 336      93870700 
 337 01b4 83B60700 		ld	a3,0(a5)
 338 01b8 233CD5FE 		sd	a3,-8(a0)
 129:src/C_API/MemoryAllocator.c ****     freeBlocksList = descriptor;
 339              		.loc 1 129 5 is_stmt 1
 340              		.loc 1 129 20 is_stmt 0
 341 01bc 23B0E700 		sd	a4,0(a5)
 130:src/C_API/MemoryAllocator.c **** 
 131:src/C_API/MemoryAllocator.c ****     return 0;
 342              		.loc 1 131 5 is_stmt 1
 132:src/C_API/MemoryAllocator.c **** }
 343              		.loc 1 132 1 is_stmt 0
 344 01c0 13050000 		li	a0,0
 345              	.LVL29:
 346 01c4 03348100 		ld	s0,8(sp)
 347              		.cfi_restore 8
 348              		.cfi_def_cfa 2, 16
 349 01c8 13010101 		addi	sp,sp,16
 350              		.cfi_def_cfa_offset 0
 351 01cc 67800000 		jr	ra
 352              		.cfi_endproc
 353              	.LFE5:
 355              		.section	.sbss,"aw",@nobits
 356              		.align	3
 359              	freeBlocksList:
 360 0000 00000000 		.zero	8
 360      00000000 
 361              		.text
 362              	.Letext0:
 363              		.file 2 "src/C_API/../../lib/hw.h"
GAS LISTING /tmp/cc1mRzn1.s 			page 10


DEFINED SYMBOLS
                            *ABS*:0000000000000000 MemoryAllocator.c
     /tmp/cc1mRzn1.s:10     .text:0000000000000000 initFirstBlock
     /tmp/cc1mRzn1.s:14     .text:0000000000000000 .L0 
     /tmp/cc1mRzn1.s:15     .text:0000000000000000 .L0 
     /tmp/cc1mRzn1.s:16     .text:0000000000000004 .L0 
     /tmp/cc1mRzn1.s:18     .text:0000000000000008 .L0 
     /tmp/cc1mRzn1.s:20     .text:000000000000000c .L0 
     /tmp/cc1mRzn1.s:22     .text:000000000000000c .L0 
     /tmp/cc1mRzn1.s:23     .text:000000000000000c .L0 
     /tmp/cc1mRzn1.s:26     .text:0000000000000014 .L0 
     /tmp/cc1mRzn1.s:27     .text:0000000000000014 .L0 
     /tmp/cc1mRzn1.s:30     .text:0000000000000020 .L0 
     /tmp/cc1mRzn1.s:32     .text:0000000000000024 .L0 
     /tmp/cc1mRzn1.s:34     .text:0000000000000028 .L0 
     /tmp/cc1mRzn1.s:35     .text:0000000000000028 .L0 
     /tmp/cc1mRzn1.s:37     .text:000000000000002c .L0 
     /tmp/cc1mRzn1.s:359    .sbss:0000000000000000 freeBlocksList
     /tmp/cc1mRzn1.s:38     .text:000000000000002c .L0 
     /tmp/cc1mRzn1.s:40     .text:0000000000000034 .L0 
     /tmp/cc1mRzn1.s:41     .text:0000000000000038 .L0 
     /tmp/cc1mRzn1.s:42     .text:0000000000000038 .L0 
     /tmp/cc1mRzn1.s:44     .text:000000000000003c .L0 
     /tmp/cc1mRzn1.s:46     .text:0000000000000040 .L0 
     /tmp/cc1mRzn1.s:52     .text:0000000000000040 splitFreeBlock
     /tmp/cc1mRzn1.s:55     .text:0000000000000040 .L0 
     /tmp/cc1mRzn1.s:57     .text:0000000000000040 .L0 
     /tmp/cc1mRzn1.s:58     .text:0000000000000044 .L0 
     /tmp/cc1mRzn1.s:60     .text:0000000000000048 .L0 
     /tmp/cc1mRzn1.s:62     .text:000000000000004c .L0 
     /tmp/cc1mRzn1.s:64     .text:000000000000004c .L0 
     /tmp/cc1mRzn1.s:65     .text:000000000000004c .L0 
     /tmp/cc1mRzn1.s:67     .text:0000000000000050 .L0 
     /tmp/cc1mRzn1.s:69     .text:0000000000000054 .L0 
     /tmp/cc1mRzn1.s:71     .text:0000000000000058 .L0 
     /tmp/cc1mRzn1.s:73     .text:000000000000005c .L0 
     /tmp/cc1mRzn1.s:74     .text:000000000000005c .L0 
     /tmp/cc1mRzn1.s:76     .text:0000000000000060 .L0 
     /tmp/cc1mRzn1.s:79     .text:0000000000000068 .L0 
     /tmp/cc1mRzn1.s:80     .text:0000000000000068 .L0 
     /tmp/cc1mRzn1.s:83     .text:000000000000006c .L0 
     /tmp/cc1mRzn1.s:84     .text:000000000000006c .L0 
     /tmp/cc1mRzn1.s:85     .text:000000000000006c .L0 
     /tmp/cc1mRzn1.s:87     .text:0000000000000070 .L0 
     /tmp/cc1mRzn1.s:88     .text:0000000000000070 .L0 
     /tmp/cc1mRzn1.s:90     .text:0000000000000074 .L0 
     /tmp/cc1mRzn1.s:91     .text:0000000000000074 .L0 
     /tmp/cc1mRzn1.s:93     .text:0000000000000078 .L0 
     /tmp/cc1mRzn1.s:95     .text:000000000000007c .L0 
     /tmp/cc1mRzn1.s:96     .text:000000000000007c .L0 
     /tmp/cc1mRzn1.s:98     .text:0000000000000080 .L0 
     /tmp/cc1mRzn1.s:99     .text:0000000000000080 .L0 
     /tmp/cc1mRzn1.s:103    .text:0000000000000084 .L0 
     /tmp/cc1mRzn1.s:104    .text:0000000000000084 .L0 
     /tmp/cc1mRzn1.s:105    .text:0000000000000088 .L0 
     /tmp/cc1mRzn1.s:106    .text:0000000000000088 .L0 
     /tmp/cc1mRzn1.s:107    .text:0000000000000088 .L0 
GAS LISTING /tmp/cc1mRzn1.s 			page 11


     /tmp/cc1mRzn1.s:109    .text:000000000000008c .L0 
     /tmp/cc1mRzn1.s:113    .text:0000000000000090 .L0 
     /tmp/cc1mRzn1.s:115    .text:0000000000000090 .L0 
     /tmp/cc1mRzn1.s:123    .text:00000000000000a0 .L0 
     /tmp/cc1mRzn1.s:129    .text:00000000000000a0 firstFit
     /tmp/cc1mRzn1.s:132    .text:00000000000000a0 .L0 
     /tmp/cc1mRzn1.s:134    .text:00000000000000a0 .L0 
     /tmp/cc1mRzn1.s:135    .text:00000000000000a4 .L0 
     /tmp/cc1mRzn1.s:139    .text:00000000000000b0 .L0 
     /tmp/cc1mRzn1.s:140    .text:00000000000000b0 .L0 
     /tmp/cc1mRzn1.s:141    .text:00000000000000b0 .L0 
     /tmp/cc1mRzn1.s:143    .text:00000000000000b4 .L0 
     /tmp/cc1mRzn1.s:146    .text:00000000000000b8 .L0 
     /tmp/cc1mRzn1.s:147    .text:00000000000000b8 .L0 
     /tmp/cc1mRzn1.s:149    .text:00000000000000c0 .L0 
     /tmp/cc1mRzn1.s:153    .text:00000000000000c4 .L0 
     /tmp/cc1mRzn1.s:154    .text:00000000000000c4 .L0 
     /tmp/cc1mRzn1.s:158    .text:00000000000000cc .L0 
     /tmp/cc1mRzn1.s:159    .text:00000000000000cc .L0 
     /tmp/cc1mRzn1.s:161    .text:00000000000000d0 .L0 
     /tmp/cc1mRzn1.s:162    .text:00000000000000d0 .L0 
     /tmp/cc1mRzn1.s:164    .text:00000000000000d4 .L0 
     /tmp/cc1mRzn1.s:167    .text:00000000000000d8 .L0 
     /tmp/cc1mRzn1.s:168    .text:00000000000000dc .L0 
     /tmp/cc1mRzn1.s:169    .text:00000000000000dc .L0 
     /tmp/cc1mRzn1.s:171    .text:00000000000000e0 .L0 
     /tmp/cc1mRzn1.s:172    .text:00000000000000e0 .L0 
     /tmp/cc1mRzn1.s:174    .text:00000000000000e4 .L0 
     /tmp/cc1mRzn1.s:177    .text:00000000000000e8 .L0 
     /tmp/cc1mRzn1.s:181    .text:00000000000000ec .L0 
     /tmp/cc1mRzn1.s:183    .text:00000000000000ec .L0 
     /tmp/cc1mRzn1.s:189    .text:00000000000000f8 .L0 
     /tmp/cc1mRzn1.s:190    .text:00000000000000f8 .L0 
     /tmp/cc1mRzn1.s:193    .text:00000000000000fc .L0 
     /tmp/cc1mRzn1.s:194    .text:0000000000000100 .L0 
     /tmp/cc1mRzn1.s:200    .text:0000000000000100 __mem_alloc
     /tmp/cc1mRzn1.s:203    .text:0000000000000100 .L0 
     /tmp/cc1mRzn1.s:205    .text:0000000000000100 .L0 
     /tmp/cc1mRzn1.s:206    .text:0000000000000100 .L0 
     /tmp/cc1mRzn1.s:207    .text:0000000000000100 .L0 
     /tmp/cc1mRzn1.s:209    .text:0000000000000104 .L0 
     /tmp/cc1mRzn1.s:210    .text:0000000000000108 .L0 
     /tmp/cc1mRzn1.s:214    .text:0000000000000114 .L0 
     /tmp/cc1mRzn1.s:215    .text:0000000000000114 .L0 
     /tmp/cc1mRzn1.s:216    .text:0000000000000114 .L0 
     /tmp/cc1mRzn1.s:218    .text:0000000000000118 .L0 
     /tmp/cc1mRzn1.s:221    .text:0000000000000118 .L0 
     /tmp/cc1mRzn1.s:224    .text:0000000000000118 .L0 
     /tmp/cc1mRzn1.s:225    .text:0000000000000118 .L0 
     /tmp/cc1mRzn1.s:226    .text:0000000000000118 .L0 
     /tmp/cc1mRzn1.s:228    .text:000000000000011c .L0 
     /tmp/cc1mRzn1.s:230    .text:0000000000000120 .L0 
     /tmp/cc1mRzn1.s:232    .text:0000000000000124 .L0 
     /tmp/cc1mRzn1.s:237    .text:0000000000000128 .L0 
     /tmp/cc1mRzn1.s:238    .text:0000000000000128 .L0 
     /tmp/cc1mRzn1.s:240    .text:0000000000000130 .L0 
     /tmp/cc1mRzn1.s:243    .text:0000000000000134 .L0 
GAS LISTING /tmp/cc1mRzn1.s 			page 12


     /tmp/cc1mRzn1.s:244    .text:0000000000000134 .L0 
     /tmp/cc1mRzn1.s:248    .text:0000000000000140 .L0 
     /tmp/cc1mRzn1.s:249    .text:0000000000000140 .L0 
     /tmp/cc1mRzn1.s:251    .text:0000000000000144 .L0 
     /tmp/cc1mRzn1.s:252    .text:0000000000000144 .L0 
     /tmp/cc1mRzn1.s:256    .text:0000000000000150 .L0 
     /tmp/cc1mRzn1.s:257    .text:0000000000000150 .L0 
     /tmp/cc1mRzn1.s:259    .text:0000000000000154 .L0 
     /tmp/cc1mRzn1.s:261    .text:0000000000000158 .L0 
     /tmp/cc1mRzn1.s:262    .text:0000000000000158 .L0 
     /tmp/cc1mRzn1.s:264    .text:000000000000015c .L0 
     /tmp/cc1mRzn1.s:267    .text:0000000000000160 .L0 
     /tmp/cc1mRzn1.s:268    .text:0000000000000160 .L0 
     /tmp/cc1mRzn1.s:270    .text:0000000000000164 .L0 
     /tmp/cc1mRzn1.s:272    .text:0000000000000168 .L0 
     /tmp/cc1mRzn1.s:273    .text:0000000000000168 .L0 
     /tmp/cc1mRzn1.s:275    .text:000000000000016c .L0 
     /tmp/cc1mRzn1.s:278    .text:0000000000000170 .L0 
     /tmp/cc1mRzn1.s:279    .text:0000000000000170 .L0 
     /tmp/cc1mRzn1.s:283    .text:0000000000000174 .L0 
     /tmp/cc1mRzn1.s:284    .text:0000000000000178 .L0 
     /tmp/cc1mRzn1.s:285    .text:0000000000000178 .L0 
     /tmp/cc1mRzn1.s:287    .text:000000000000017c .L0 
     /tmp/cc1mRzn1.s:288    .text:000000000000017c .L0 
     /tmp/cc1mRzn1.s:290    .text:0000000000000180 .L0 
     /tmp/cc1mRzn1.s:293    .text:0000000000000184 .L0 
     /tmp/cc1mRzn1.s:297    .text:0000000000000188 .L0 
     /tmp/cc1mRzn1.s:299    .text:0000000000000188 .L0 
     /tmp/cc1mRzn1.s:304    .text:0000000000000194 .L0 
     /tmp/cc1mRzn1.s:305    .text:0000000000000194 .L0 
     /tmp/cc1mRzn1.s:306    .text:0000000000000194 .L0 
     /tmp/cc1mRzn1.s:307    .text:0000000000000194 .L0 
     /tmp/cc1mRzn1.s:309    .text:0000000000000194 .L0 
     /tmp/cc1mRzn1.s:312    .text:0000000000000198 .L0 
     /tmp/cc1mRzn1.s:313    .text:000000000000019c .L0 
     /tmp/cc1mRzn1.s:319    .text:000000000000019c __mem_free
     /tmp/cc1mRzn1.s:322    .text:000000000000019c .L0 
     /tmp/cc1mRzn1.s:324    .text:000000000000019c .L0 
     /tmp/cc1mRzn1.s:325    .text:00000000000001a0 .L0 
     /tmp/cc1mRzn1.s:327    .text:00000000000001a4 .L0 
     /tmp/cc1mRzn1.s:329    .text:00000000000001a8 .L0 
     /tmp/cc1mRzn1.s:331    .text:00000000000001a8 .L0 
     /tmp/cc1mRzn1.s:332    .text:00000000000001a8 .L0 
     /tmp/cc1mRzn1.s:335    .text:00000000000001ac .L0 
     /tmp/cc1mRzn1.s:336    .text:00000000000001ac .L0 
     /tmp/cc1mRzn1.s:340    .text:00000000000001bc .L0 
     /tmp/cc1mRzn1.s:341    .text:00000000000001bc .L0 
     /tmp/cc1mRzn1.s:343    .text:00000000000001c0 .L0 
     /tmp/cc1mRzn1.s:344    .text:00000000000001c0 .L0 
     /tmp/cc1mRzn1.s:347    .text:00000000000001c8 .L0 
     /tmp/cc1mRzn1.s:348    .text:00000000000001c8 .L0 
     /tmp/cc1mRzn1.s:350    .text:00000000000001cc .L0 
     /tmp/cc1mRzn1.s:352    .text:00000000000001d0 .L0 
     /tmp/cc1mRzn1.s:364    .text:00000000000001d0 .L0 
                     .debug_frame:0000000000000000 .L0 
     /tmp/cc1mRzn1.s:23     .text:000000000000000c .L0 
     /tmp/cc1mRzn1.s:27     .text:0000000000000014 .L0 
GAS LISTING /tmp/cc1mRzn1.s 			page 13


     /tmp/cc1mRzn1.s:38     .text:000000000000002c .L0 
     /tmp/cc1mRzn1.s:147    .text:00000000000000b8 .L0 
     /tmp/cc1mRzn1.s:154    .text:00000000000000c4 .L0 
     /tmp/cc1mRzn1.s:238    .text:0000000000000128 .L0 
     /tmp/cc1mRzn1.s:336    .text:00000000000001ac .L0 
     /tmp/cc1mRzn1.s:112    .text:0000000000000090 .L5
     /tmp/cc1mRzn1.s:119    .text:0000000000000098 .L6
     /tmp/cc1mRzn1.s:102    .text:0000000000000084 .L3
     /tmp/cc1mRzn1.s:180    .text:00000000000000ec .L15
     /tmp/cc1mRzn1.s:165    .text:00000000000000d8 .L9
     /tmp/cc1mRzn1.s:187    .text:00000000000000f8 .L16
     /tmp/cc1mRzn1.s:151    .text:00000000000000c4 .L10
     /tmp/cc1mRzn1.s:157    .text:00000000000000cc .L11
     /tmp/cc1mRzn1.s:303    .text:0000000000000194 .L22
     /tmp/cc1mRzn1.s:296    .text:0000000000000188 .L27
     /tmp/cc1mRzn1.s:281    .text:0000000000000174 .L17
     /tmp/cc1mRzn1.s:265    .text:0000000000000160 .L20
     /tmp/cc1mRzn1.s:276    .text:0000000000000170 .L21
     /tmp/cc1mRzn1.s:241    .text:0000000000000134 .L19
     /tmp/cc1mRzn1.s:737    .debug_abbrev:0000000000000000 .Ldebug_abbrev0
     /tmp/cc1mRzn1.s:1357   .debug_str:0000000000000117 .LASF35
     /tmp/cc1mRzn1.s:1373   .debug_str:0000000000000234 .LASF36
     /tmp/cc1mRzn1.s:1369   .debug_str:000000000000020d .LASF37
     /tmp/cc1mRzn1.s:5      .text:0000000000000000 .Ltext0
     /tmp/cc1mRzn1.s:362    .text:00000000000001d0 .Letext0
     /tmp/cc1mRzn1.s:1311   .debug_line:0000000000000000 .Ldebug_line0
     /tmp/cc1mRzn1.s:1359   .debug_str:00000000000001b5 .LASF0
     /tmp/cc1mRzn1.s:1345   .debug_str:00000000000000c8 .LASF1
     /tmp/cc1mRzn1.s:1339   .debug_str:000000000000009d .LASF2
     /tmp/cc1mRzn1.s:1327   .debug_str:000000000000004a .LASF4
     /tmp/cc1mRzn1.s:1343   .debug_str:00000000000000b6 .LASF3
     /tmp/cc1mRzn1.s:1315   .debug_str:0000000000000013 .LASF5
     /tmp/cc1mRzn1.s:1313   .debug_str:0000000000000000 .LASF6
     /tmp/cc1mRzn1.s:1331   .debug_str:0000000000000067 .LASF7
     /tmp/cc1mRzn1.s:1363   .debug_str:00000000000001d2 .LASF8
     /tmp/cc1mRzn1.s:1325   .debug_str:000000000000003c .LASF9
     /tmp/cc1mRzn1.s:1391   .debug_str:00000000000002a4 .LASF10
     /tmp/cc1mRzn1.s:1335   .debug_str:0000000000000080 .LASF11
     /tmp/cc1mRzn1.s:1381   .debug_str:000000000000026f .LASF12
     /tmp/cc1mRzn1.s:1361   .debug_str:00000000000001c2 .LASF13
     /tmp/cc1mRzn1.s:1347   .debug_str:00000000000000db .LASF14
     /tmp/cc1mRzn1.s:1329   .debug_str:0000000000000051 .LASF15
     /tmp/cc1mRzn1.s:1365   .debug_str:00000000000001e2 .LASF16
     /tmp/cc1mRzn1.s:1351   .debug_str:00000000000000f7 .LASF20
     /tmp/cc1mRzn1.s:1385   .debug_str:000000000000028b .LASF17
     /tmp/cc1mRzn1.s:1387   .debug_str:0000000000000290 .LASF18
     /tmp/cc1mRzn1.s:1317   .debug_str:000000000000001a .LASF19
     /tmp/cc1mRzn1.s:1389   .debug_str:0000000000000295 .LASF21
     /tmp/cc1mRzn1.s:1341   .debug_str:00000000000000ab .LASF23
     /tmp/cc1mRzn1.s:320    .text:000000000000019c .LFB5
     /tmp/cc1mRzn1.s:353    .text:00000000000001d0 .LFE5
     /tmp/cc1mRzn1.s:1142   .debug_loc:0000000000000000 .LLST8
     /tmp/cc1mRzn1.s:1375   .debug_str:0000000000000250 .LASF22
     /tmp/cc1mRzn1.s:1383   .debug_str:000000000000027f .LASF24
     /tmp/cc1mRzn1.s:201    .text:0000000000000100 .LFB4
     /tmp/cc1mRzn1.s:314    .text:000000000000019c .LFE4
     /tmp/cc1mRzn1.s:1155   .debug_loc:0000000000000038 .LLST5
GAS LISTING /tmp/cc1mRzn1.s 			page 14


     /tmp/cc1mRzn1.s:1349   .debug_str:00000000000000e7 .LASF25
     /tmp/cc1mRzn1.s:1202   .debug_loc:00000000000000dd .LLST6
     /tmp/cc1mRzn1.s:222    .text:0000000000000118 .LBB4
     /tmp/cc1mRzn1.s:235    .text:0000000000000128 .LBE4
     /tmp/cc1mRzn1.s:1213   .debug_loc:0000000000000113 .LLST7
     /tmp/cc1mRzn1.s:246    .text:0000000000000140 .LVL19
     /tmp/cc1mRzn1.s:254    .text:0000000000000150 .LVL20
     /tmp/cc1mRzn1.s:300    .text:0000000000000190 .LVL24
     /tmp/cc1mRzn1.s:1371   .debug_str:000000000000022b .LASF26
     /tmp/cc1mRzn1.s:130    .text:00000000000000a0 .LFB3
     /tmp/cc1mRzn1.s:195    .text:0000000000000100 .LFE3
     /tmp/cc1mRzn1.s:1323   .debug_str:0000000000000034 .LASF27
     /tmp/cc1mRzn1.s:1222   .debug_loc:0000000000000138 .LLST3
     /tmp/cc1mRzn1.s:1379   .debug_str:0000000000000266 .LASF28
     /tmp/cc1mRzn1.s:1244   .debug_loc:0000000000000197 .LLST4
     /tmp/cc1mRzn1.s:184    .text:00000000000000f4 .LVL13
     /tmp/cc1mRzn1.s:1321   .debug_str:0000000000000025 .LASF29
     /tmp/cc1mRzn1.s:53     .text:0000000000000040 .LFB2
     /tmp/cc1mRzn1.s:124    .text:00000000000000a0 .LFE2
     /tmp/cc1mRzn1.s:1333   .debug_str:000000000000007a .LASF30
     /tmp/cc1mRzn1.s:1255   .debug_loc:00000000000001cd .LLST0
     /tmp/cc1mRzn1.s:1355   .debug_str:000000000000010c .LASF31
     /tmp/cc1mRzn1.s:1367   .debug_str:00000000000001f8 .LASF32
     /tmp/cc1mRzn1.s:1291   .debug_loc:0000000000000258 .LLST1
     /tmp/cc1mRzn1.s:1337   .debug_str:000000000000008f .LASF33
     /tmp/cc1mRzn1.s:1319   .debug_str:000000000000001f .LASF38
     /tmp/cc1mRzn1.s:1353   .debug_str:00000000000000fd .LASF39
     /tmp/cc1mRzn1.s:11     .text:0000000000000000 .LFB0
     /tmp/cc1mRzn1.s:47     .text:0000000000000040 .LFE0
     /tmp/cc1mRzn1.s:1377   .debug_str:000000000000025b .LASF34
     /tmp/cc1mRzn1.s:323    .text:000000000000019c .LVL27
     /tmp/cc1mRzn1.s:345    .text:00000000000001c4 .LVL29
     /tmp/cc1mRzn1.s:204    .text:0000000000000100 .LVL16
     /tmp/cc1mRzn1.s:220    .text:0000000000000118 .LVL17
     /tmp/cc1mRzn1.s:233    .text:0000000000000128 .LVL18
     /tmp/cc1mRzn1.s:291    .text:0000000000000180 .LVL22
     /tmp/cc1mRzn1.s:295    .text:0000000000000188 .LVL23
     /tmp/cc1mRzn1.s:302    .text:0000000000000194 .LVL25
     /tmp/cc1mRzn1.s:310    .text:0000000000000198 .LVL26
     /tmp/cc1mRzn1.s:280    .text:0000000000000174 .LVL21
     /tmp/cc1mRzn1.s:133    .text:00000000000000a0 .LVL8
     /tmp/cc1mRzn1.s:150    .text:00000000000000c4 .LVL9
     /tmp/cc1mRzn1.s:175    .text:00000000000000e4 .LVL11
     /tmp/cc1mRzn1.s:179    .text:00000000000000ec .LVL12
     /tmp/cc1mRzn1.s:155    .text:00000000000000cc .LVL10
     /tmp/cc1mRzn1.s:186    .text:00000000000000f8 .LVL14
     /tmp/cc1mRzn1.s:56     .text:0000000000000040 .LVL1
     /tmp/cc1mRzn1.s:101    .text:0000000000000084 .LVL3
     /tmp/cc1mRzn1.s:111    .text:0000000000000090 .LVL4
     /tmp/cc1mRzn1.s:116    .text:0000000000000094 .LVL5
     /tmp/cc1mRzn1.s:118    .text:0000000000000098 .LVL6
     /tmp/cc1mRzn1.s:121    .text:000000000000009c .LVL7
     /tmp/cc1mRzn1.s:81     .text:000000000000006c .LVL2
     /tmp/cc1mRzn1.s:365    .debug_info:0000000000000000 .Ldebug_info0

UNDEFINED SYMBOLS
HEAP_START_ADDR
GAS LISTING /tmp/cc1mRzn1.s 			page 15


HEAP_END_ADDR
